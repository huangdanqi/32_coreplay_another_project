#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Complete Workflow API Test Client
This client tests the complete diary agent workflow API with all event types.
"""

import requests
import json
import time
from datetime import datetime, timedelta

# Configuration - Easy to change for cloud deployment
API_CONFIG = {
    "base_url": "http://localhost:5002/api",  # Change to cloud URL when ready
    "timeout": 30,
    "retry_attempts": 3
}

def make_api_request(method, endpoint, data=None):
    """Make API request with error handling and retries."""
    url = f"{API_CONFIG['base_url']}{endpoint}"
    
    for attempt in range(API_CONFIG['retry_attempts']):
        try:
            if method.upper() == 'GET':
                response = requests.get(url, timeout=API_CONFIG['timeout'])
            elif method.upper() == 'POST':
                response = requests.post(
                    url, 
                    json=data, 
                    headers={"Content-Type": "application/json"},
                    timeout=API_CONFIG['timeout']
                )
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            
            return response
            
        except requests.exceptions.ConnectionError:
            print(f"‚ùå Connection failed (attempt {attempt + 1}/{API_CONFIG['retry_attempts']})")
            if attempt < API_CONFIG['retry_attempts'] - 1:
                print("‚è≥ Retrying in 2 seconds...")
                time.sleep(2)
            else:
                print("‚ùå All connection attempts failed!")
                return None
        except requests.exceptions.Timeout:
            print(f"‚è∞ Request timeout (attempt {attempt + 1}/{API_CONFIG['retry_attempts']})")
            if attempt < API_CONFIG['retry_attempts'] - 1:
                time.sleep(1)
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")
            return None
    
    return None

def test_health_check():
    """Test the health check endpoint."""
    print("üîç Testing Health Check...")
    print("-" * 40)
    
    response = make_api_request('GET', '/health')
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        return result.get('success', False)
    else:
        print("‚ùå Health check failed!")
        return False

def test_daily_plan_creation():
    """Test daily plan creation (00:00 daily task)."""
    print("\nüìÖ Testing Daily Plan Creation...")
    print("-" * 50)
    
    post_data = {
        "date": datetime.now().strftime("%Y-%m-%d")
    }
    
    print("üì§ Creating daily plan:")
    print(json.dumps(post_data, indent=2, ensure_ascii=False))
    
    response = make_api_request('POST', '/diary/daily-plan', post_data)
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        return result.get('success', False)
    else:
        print("‚ùå Daily plan creation failed!")
        return False

def test_weather_event():
    """Test weather category diary generation."""
    print("\nüå§Ô∏è Testing Weather Event Diary Generation...")
    print("-" * 50)
    
    post_data = {
        "event_type": "weather",
        "event_name": "sunny_day_event",
        "event_details": {
            "city": "Âåó‰∫¨",
            "weather_changes": "Êô¥Â§©ËΩ¨Â§ö‰∫ëÔºåÊ∏©Â∫¶ÈÄÇÂÆú",
            "liked_weather": "Êô¥Â§©",
            "disliked_weather": "Èõ®Â§©",
            "personality_type": "ÂºÄÊúóÊ¥ªÊ≥º",
            "temperature": "22¬∞C",
            "humidity": "65%"
        },
        "user_id": 1
    }
    
    print("üì§ Sending weather event:")
    print(json.dumps(post_data, indent=2, ensure_ascii=False))
    
    response = make_api_request('POST', '/diary/generate', post_data)
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        if result.get('success') and result.get('data', {}).get('should_write'):
            diary_data = result.get('data', {})
            print(f"\nüéØ Generated Weather Diary:")
            print(f"   üìñ Title: {diary_data.get('title', 'N/A')}")
            print(f"   üìÑ Content: {diary_data.get('content', 'N/A')}")
            print(f"   üòä Emotion: {', '.join(diary_data.get('emotion_tags', []))}")
        
        return result.get('success', False)
    else:
        print("‚ùå Weather event test failed!")
        return False

def test_human_machine_interaction():
    """Test human-machine interaction event."""
    print("\nü§ñ Testing Human-Machine Interaction Event...")
    print("-" * 50)
    
    post_data = {
        "event_type": "human_machine_interaction",
        "event_name": "petting_session",
        "event_details": {
            "interaction_type": "ÊäöÊë∏",
            "duration": "10ÂàÜÈíü",
            "user_response": "positive",
            "toy_emotion": "ÂºÄÂøÉ",
            "interaction_intensity": "gentle",
            "location": "ÂÆ¢ÂéÖ"
        },
        "user_id": 1
    }
    
    print("üì§ Sending interaction event:")
    print(json.dumps(post_data, indent=2, ensure_ascii=False))
    
    response = make_api_request('POST', '/diary/generate', post_data)
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        if result.get('success') and result.get('data', {}).get('should_write'):
            diary_data = result.get('data', {})
            print(f"\nüéØ Generated Interaction Diary:")
            print(f"   üìñ Title: {diary_data.get('title', 'N/A')}")
            print(f"   üìÑ Content: {diary_data.get('content', 'N/A')}")
            print(f"   üòä Emotion: {', '.join(diary_data.get('emotion_tags', []))}")
        
        return result.get('success', False)
    else:
        print("‚ùå Human-machine interaction test failed!")
        return False

def test_holiday_event():
    """Test holiday category event."""
    print("\nüéâ Testing Holiday Event...")
    print("-" * 50)
    
    post_data = {
        "event_type": "holiday",
        "event_name": "spring_festival_day2",
        "event_details": {
            "time_description": "Êò•ËäÇÁ¨¨2Â§©",
            "holiday_name": "Êò•ËäÇ",
            "festivity_level": "high",
            "family_gathering": True,
            "special_activities": ["ÊãúÂπ¥", "ÂêÉÈ•∫Â≠ê", "ÊîæÁÉüËä±"]
        },
        "user_id": 1
    }
    
    print("üì§ Sending holiday event:")
    print(json.dumps(post_data, indent=2, ensure_ascii=False))
    
    response = make_api_request('POST', '/diary/generate', post_data)
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        if result.get('success') and result.get('data', {}).get('should_write'):
            diary_data = result.get('data', {})
            print(f"\nüéØ Generated Holiday Diary:")
            print(f"   üìñ Title: {diary_data.get('title', 'N/A')}")
            print(f"   üìÑ Content: {diary_data.get('content', 'N/A')}")
            print(f"   üòä Emotion: {', '.join(diary_data.get('emotion_tags', []))}")
        
        return result.get('success', False)
    else:
        print("‚ùå Holiday event test failed!")
        return False

def test_batch_events():
    """Test batch processing of multiple event types."""
    print("\nüìö Testing Batch Event Processing...")
    print("-" * 50)
    
    batch_data = {
        "events": [
            {
                "event_type": "season",
                "event_name": "spring_arrival",
                "event_details": {
                    "city": "‰∏äÊµ∑",
                    "season": "Êò•Â≠£",
                    "temperature": "18¬∞C",
                    "liked_season": "Êò•Â≠£",
                    "disliked_season": "ÂÜ¨Â≠£",
                    "personality_type": "Ê∏©Âíå"
                }
            },
            {
                "event_type": "current_affairs",
                "event_name": "major_beneficial_event",
                "event_details": {
                    "event_name": "ÁßëÊäÄÁ™ÅÁ†¥",
                    "event_tags": ["ÈáçÂ§ßÂà©Â•Ω", "ÁßëÊäÄÂàõÊñ∞"],
                    "event_type": "major_beneficial",
                    "impact_level": "high"
                }
            },
            {
                "event_type": "human_machine_dialogue",
                "event_name": "emotional_conversation",
                "event_details": {
                    "event_summary": "‰∏ª‰∫∫ÂàÜ‰∫´‰∫Ü‰∏ÄÂ§©ÁöÑÂøÉÊÉÖ",
                    "event_title": "ÂøÉÊÉÖÂàÜ‰∫´",
                    "content_theme": "ÊÉÖÊÑü‰∫§ÊµÅ",
                    "owner_emotion": "ÂºÄÂøÉ",
                    "dialogue_duration": "15ÂàÜÈíü"
                }
            }
        ],
        "user_id": 1
    }
    
    print("üì§ Sending batch events:")
    print(json.dumps(batch_data, indent=2, ensure_ascii=False))
    
    response = make_api_request('POST', '/diary/batch', batch_data)
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        if result.get('success'):
            batch_info = result.get('data', {})
            diary_entries = batch_info.get('diary_entries', [])
            skipped_events = batch_info.get('skipped_events', [])
            
            print(f"\nüéØ Batch Processing Results:")
            print(f"   üìù Generated: {len(diary_entries)} diary entries")
            print(f"   ‚è≠Ô∏è Skipped: {len(skipped_events)} events")
            
            for i, diary in enumerate(diary_entries, 1):
                print(f"\n   üìñ Diary {i} ({diary.get('event_type', 'N/A')}):")
                print(f"      Title: {diary.get('title', 'N/A')}")
                print(f"      Content: {diary.get('content', 'N/A')}")
                print(f"      Emotion: {', '.join(diary.get('emotion_tags', []))}")
        
        return result.get('success', False)
    else:
        print("‚ùå Batch processing test failed!")
        return False

def test_daily_status():
    """Test getting daily status."""
    print("\nüìä Testing Daily Status...")
    print("-" * 40)
    
    response = make_api_request('GET', '/diary/daily-status')
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        return result.get('success', False)
    else:
        print("‚ùå Daily status test failed!")
        return False

def test_event_types():
    """Test getting supported event types."""
    print("\nüìã Testing Event Types...")
    print("-" * 40)
    
    response = make_api_request('GET', '/diary/event-types')
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        return result.get('success', False)
    else:
        print("‚ùå Event types test failed!")
        return False

def test_complete_workflow():
    """Test the complete workflow."""
    print("\nüß™ Testing Complete Workflow...")
    print("-" * 50)
    
    response = make_api_request('POST', '/diary/workflow-test', {})
    if response:
        print(f"‚úÖ Status Code: {response.status_code}")
        result = response.json()
        print(f"üìä Response:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        if result.get('success'):
            workflow_data = result.get('data', {})
            test_results = workflow_data.get('test_results', [])
            daily_plan = workflow_data.get('daily_plan', {})
            
            print(f"\nüéØ Complete Workflow Results:")
            print(f"   üìÖ Daily Plan: {daily_plan.get('planned_count', 0)} planned, {daily_plan.get('written_count', 0)} written")
            print(f"   üìù Generated: {len(test_results)} diary entries")
            
            for i, diary in enumerate(test_results, 1):
                print(f"\n   üìñ Diary {i} ({diary.get('event_type', 'N/A')}):")
                print(f"      Title: {diary.get('title', 'N/A')}")
                print(f"      Content: {diary.get('content', 'N/A')}")
                print(f"      Emotion: {', '.join(diary.get('emotion_tags', []))}")
        
        return result.get('success', False)
    else:
        print("‚ùå Complete workflow test failed!")
        return False

def run_all_tests():
    """Run all tests and show summary."""
    print("üöÄ Running All Complete Workflow API Tests")
    print("=" * 60)
    
    tests = [
        ("Health Check", test_health_check),
        ("Daily Plan Creation", test_daily_plan_creation),
        ("Weather Event", test_weather_event),
        ("Human-Machine Interaction", test_human_machine_interaction),
        ("Holiday Event", test_holiday_event),
        ("Batch Events", test_batch_events),
        ("Daily Status", test_daily_status),
        ("Event Types", test_event_types),
        ("Complete Workflow", test_complete_workflow)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ Running: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            print(f"üí• {test_name}: ERROR - {e}")
            results.append((test_name, False))
    
    # Summary
    print(f"\nüìä Test Summary:")
    print("=" * 40)
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"   {test_name}: {status}")
    
    print(f"\nüéØ Overall: {passed}/{total} tests passed")
    print(f"üìà Success Rate: {(passed/total*100):.1f}%")

def interactive_test_mode():
    """Interactive testing mode."""
    print("üéÆ Interactive Complete Workflow Test Mode")
    print("=" * 50)
    
    while True:
        print("\nÈÄâÊã©ÊµãËØï:")
        print("1. ÂÅ•Â∫∑Ê£ÄÊü•")
        print("2. ÂàõÂª∫ÊØèÊó•ËÆ°Âàí")
        print("3. Â§©Ê∞î‰∫ã‰ª∂ÊµãËØï")
        print("4. ‰∫∫Êú∫‰∫íÂä®ÊµãËØï")
        print("5. ËäÇÊó•‰∫ã‰ª∂ÊµãËØï")
        print("6. ÊâπÈáè‰∫ã‰ª∂ÊµãËØï")
        print("7. ÊØèÊó•Áä∂ÊÄÅÊü•ËØ¢")
        print("8. ‰∫ã‰ª∂Á±ªÂûãÊü•ËØ¢")
        print("9. ÂÆåÊï¥Â∑•‰ΩúÊµÅÊµãËØï")
        print("10. ËøêË°åÊâÄÊúâÊµãËØï")
        print("11. ÈÄÄÂá∫")
        
        choice = input("\nËØ∑ËæìÂÖ•ÈÄâÊã© (1-11): ").strip()
        
        if choice == "1":
            test_health_check()
        elif choice == "2":
            test_daily_plan_creation()
        elif choice == "3":
            test_weather_event()
        elif choice == "4":
            test_human_machine_interaction()
        elif choice == "5":
            test_holiday_event()
        elif choice == "6":
            test_batch_events()
        elif choice == "7":
            test_daily_status()
        elif choice == "8":
            test_event_types()
        elif choice == "9":
            test_complete_workflow()
        elif choice == "10":
            run_all_tests()
        elif choice == "11":
            print("üëã ÂÜçËßÅ!")
            break
        else:
            print("‚ùå Êó†ÊïàÈÄâÊã©ÔºåËØ∑ÈáçËØï")

def main():
    """Main function."""
    print("üöÄ Complete Diary Agent Workflow API Test Client")
    print("=" * 60)
    print(f"üåê API Base URL: {API_CONFIG['base_url']}")
    print(f"‚è∞ Timeout: {API_CONFIG['timeout']} seconds")
    print(f"üîÑ Retry Attempts: {API_CONFIG['retry_attempts']}")
    print("=" * 60)
    
    # Check if server is running
    print("üîç Checking if complete workflow server is running...")
    if not test_health_check():
        print("\n‚ùå Complete workflow server is not running!")
        print("üöÄ Please start the complete workflow server first:")
        print("   python complete_diary_agent_api.py")
        return
    
    print("\nÈÄâÊã©ËøêË°åÊ®°Âºè:")
    print("1. ËøêË°åÊâÄÊúâÊµãËØï")
    print("2. ‰∫§‰∫íÂºèÊµãËØïÊ®°Âºè")
    
    mode = input("ËØ∑ÈÄâÊã©Ê®°Âºè (1-2): ").strip()
    
    if mode == "1":
        run_all_tests()
    elif mode == "2":
        interactive_test_mode()
    else:
        print("‚ùå Êó†ÊïàÈÄâÊã©")

if __name__ == "__main__":
    main()

