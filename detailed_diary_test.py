#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced test script to show complete diary entries and related events.
This script displays the full diary entry structure and content generated by the interactive agent.
"""

import sys
import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# Add the project root to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('detailed_diary_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MockMQTTEvent:
    """Mock MQTT event for testing."""
    
    def __init__(self, event_type: str = "same_frequency_event", user_id: int = 1):
        self.event_type = event_type
        self.user_id = user_id
        self.timestamp = datetime.now()
        self.payload = {
            "event_type": event_type,
            "user_id": user_id,
            "interaction_type": "摸摸脸",
            "same_frequency_event": "一起玩耍",
            "toy_owner_nickname": "小明",
            "close_friend_nickname": "小红",
            "close_friend_owner_nickname": "小红的妈妈"
        }

async def test_detailed_diary_generation():
    """Test detailed diary generation with full content display."""
    print("=== Detailed Diary Entry Generation Test ===")
    print("=" * 60)
    
    try:
        # Import the interactive agent components
        from diary_agent.agents.interactive_agent import InteractiveAgent
        from diary_agent.core.llm_manager import LLMConfigManager
        from diary_agent.utils.data_models import EventData, PromptConfig
        from diary_agent.integration.interaction_data_reader import InteractionDataReader
        
        print("✅ Successfully imported interactive agent components")
        
        # Initialize LLM config manager
        llm_manager = LLMConfigManager()
        
        print(f"🔧 Using Ollama configuration: {llm_manager.get_default_provider()}")
        
        # Get the default provider config
        default_provider_name = llm_manager.get_default_provider()
        default_provider_config = llm_manager.get_provider_config(default_provider_name)
        
        print(f"   Model: {default_provider_config.model_name}")
        print(f"   Endpoint: {default_provider_config.api_endpoint}")
        
        # Initialize prompt configuration with better prompts
        prompt_config = PromptConfig(
            agent_type="interactive",
            system_prompt="""你是一个智能玩具的日记生成助手。你需要根据人机互动事件生成有趣、生动的日记内容。

要求：
1. 标题：最多6个字符，要简洁有趣
2. 内容：最多35个字符，要包含事件信息和情感表达
3. 情感标签：从预定义的情感中选择合适的
4. 必须包含：事件名称、玩具主人昵称、好朋友昵称、好朋友主人昵称

请用中文生成内容，要自然、有趣、符合玩具的性格。""",
            user_prompt_template="""请根据以下人机互动事件生成日记内容：

事件数据：{event_data}

请生成：
1. 标题（最多6字符）
2. 内容（最多35字符）
3. 情感标签（从：生气愤怒、悲伤难过、担忧、焦虑忧愁、惊讶震惊、好奇、羞愧、平静、开心快乐、兴奋激动中选择）

格式要求：
- 标题要简洁有趣
- 内容要包含事件信息和情感
- 情感要符合事件性质""",
            output_format={
                "content": "string",
                "emotion_tags": "list",
                "title": "string"
            },
            validation_rules={
                "max_content_length": 35,
                "max_title_length": 6,
                "required_fields": ["content", "title", "emotion_tags"]
            }
        )
        
        # Initialize interaction data reader
        data_reader = InteractionDataReader()
        
        # Initialize interactive agent
        interactive_agent = InteractiveAgent(
            agent_type="interactive",
            prompt_config=prompt_config,
            llm_manager=llm_manager,
            data_reader=data_reader
        )
        
        print("✅ Interactive agent initialized successfully")
        
        # Test scenarios with detailed event information
        scenarios = [
            {
                "name": "同频玩耍事件",
                "event_name": "liked_interaction_once",
                "interaction_type": "一起玩耍",
                "same_frequency_event": "一起玩耍",
                "description": "小明和小红同时触发了一起玩耍的互动"
            },
            {
                "name": "摸摸头事件",
                "event_name": "liked_interaction_3_to_5_times",
                "interaction_type": "摸摸头",
                "same_frequency_event": "摸摸头",
                "description": "小明和小红同时被摸了头"
            },
            {
                "name": "喂食事件",
                "event_name": "liked_interaction_over_5_times",
                "interaction_type": "喂食",
                "same_frequency_event": "喂食",
                "description": "小明和小红同时被喂食"
            }
        ]
        
        all_results = []
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\n{'='*20} 测试场景 {i}: {scenario['name']} {'='*20}")
            
            # Create mock MQTT event
            mqtt_event = MockMQTTEvent(
                event_type="same_frequency_event",
                user_id=1
            )
            mqtt_event.payload["interaction_type"] = scenario['interaction_type']
            mqtt_event.payload["same_frequency_event"] = scenario['same_frequency_event']
            
            print(f"📡 MQTT事件数据:")
            print(f"   事件类型: {mqtt_event.event_type}")
            print(f"   用户ID: {mqtt_event.user_id}")
            print(f"   互动类型: {mqtt_event.payload['interaction_type']}")
            print(f"   同频事件: {mqtt_event.payload['same_frequency_event']}")
            print(f"   玩具主人: {mqtt_event.payload['toy_owner_nickname']}")
            print(f"   好朋友: {mqtt_event.payload['close_friend_nickname']}")
            print(f"   好朋友主人: {mqtt_event.payload['close_friend_owner_nickname']}")
            print(f"   描述: {scenario['description']}")
            
            # Create event data for the agent
            event_data = EventData(
                event_id=f"test_event_{datetime.now().timestamp()}",
                event_type="human_machine_interaction",
                event_name=scenario['event_name'],
                timestamp=mqtt_event.timestamp,
                user_id=mqtt_event.user_id,
                context_data=mqtt_event.payload,
                metadata={
                    "trigger_condition": "MQTT message received with event type",
                    "content_requirements": [
                        "Same frequency event name",
                        "Toy owner's nickname",
                        "Close friend's nickname",
                        "Close friend's owner's nickname"
                    ],
                    "scenario_description": scenario['description']
                }
            )
            
            print(f"\n🔄 正在处理事件: {scenario['event_name']}")
            
            # Process the event with the interactive agent
            result = await interactive_agent.process_event(event_data)
            
            print(f"✅ 事件处理完成")
            
            # Display the complete diary entry
            print(f"\n📝 生成的日记条目:")
            print(f"   条目ID: {result.entry_id}")
            print(f"   用户ID: {result.user_id}")
            print(f"   时间戳: {result.timestamp}")
            print(f"   事件类型: {result.event_type}")
            print(f"   事件名称: {result.event_name}")
            print(f"   标题: '{result.title}' (长度: {len(result.title)})")
            print(f"   内容: '{result.content}' (长度: {len(result.content)})")
            print(f"   情感标签: {[tag.value for tag in result.emotion_tags]}")
            print(f"   代理类型: {result.agent_type}")
            print(f"   LLM提供商: {result.llm_provider}")
            
            # Validate content requirements
            print(f"\n🔍 内容验证:")
            required_fields = [
                "same_frequency_event",
                "toy_owner_nickname", 
                "close_friend_nickname",
                "close_friend_owner_nickname"
            ]
            
            content_text = f"{result.title} {result.content}"
            validation_results = {}
            
            for field in required_fields:
                field_chinese = {
                    "same_frequency_event": "一起玩耍",
                    "toy_owner_nickname": "小明",
                    "close_friend_nickname": "小红",
                    "close_friend_owner_nickname": "小红的妈妈"
                }
                
                if field_chinese[field] in content_text:
                    validation_results[field] = f"✅ 找到: {field_chinese[field]}"
                else:
                    validation_results[field] = f"❌ 缺失: {field_chinese[field]}"
            
            for field, status in validation_results.items():
                print(f"   {field}: {status}")
            
            # Save detailed result
            scenario_result = {
                "scenario_name": scenario['name'],
                "event_name": scenario['event_name'],
                "interaction_type": scenario['interaction_type'],
                "same_frequency_event": scenario['same_frequency_event'],
                "description": scenario['description'],
                "mqtt_event": mqtt_event.payload,
                "diary_entry": {
                    "entry_id": result.entry_id,
                    "user_id": result.user_id,
                    "timestamp": result.timestamp.isoformat(),
                    "event_type": result.event_type,
                    "event_name": result.event_name,
                    "title": result.title,
                    "content": result.content,
                    "emotion_tags": [tag.value for tag in result.emotion_tags],
                    "agent_type": result.agent_type,
                    "llm_provider": result.llm_provider
                },
                "validation_results": validation_results
            }
            
            all_results.append(scenario_result)
            
            print(f"\n✅ 场景 {i} 完成")
            print(f"{'='*60}")
        
        # Save all detailed results
        with open('detailed_diary_results.json', 'w', encoding='utf-8') as f:
            json.dump(all_results, f, indent=2, ensure_ascii=False)
        
        print(f"\n💾 详细结果已保存到: detailed_diary_results.json")
        
        # Summary
        print(f"\n📊 测试总结:")
        print(f"   测试场景数: {len(scenarios)}")
        print(f"   成功处理: {len(all_results)}")
        print(f"   LLM模型: {default_provider_config.model_name}")
        print(f"   提供商: {default_provider_name}")
        
        # Show sample diary entries
        print(f"\n📖 生成的日记条目示例:")
        for i, result in enumerate(all_results, 1):
            diary = result['diary_entry']
            print(f"\n   场景 {i}: {result['scenario_name']}")
            print(f"   标题: {diary['title']}")
            print(f"   内容: {diary['content']}")
            print(f"   情感: {', '.join(diary['emotion_tags'])}")
        
        print(f"\n🎉 详细日记生成测试完成!")
        
    except Exception as e:
        print(f"❌ 测试过程中出现错误: {e}")
        logger.error(f"详细测试失败: {e}", exc_info=True)

def main():
    """Main test function."""
    print("🚀 启动详细日记条目生成测试")
    print("=" * 60)
    
    # Check if Ollama is running
    print("🔍 检查Ollama可用性...")
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            print("✅ Ollama正在运行且可访问")
        else:
            print("⚠️  Ollama响应但状态异常")
    except Exception as e:
        print(f"❌ Ollama无法访问: {e}")
        print("请确保Ollama在 http://localhost:11434 上运行")
        return
    
    # Run the detailed test
    asyncio.run(test_detailed_diary_generation())
    
    print("\n🎯 所有测试完成!")
    print("查看 detailed_diary_results.json 获取详细结果")

if __name__ == "__main__":
    main()

