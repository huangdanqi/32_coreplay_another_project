import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

export const useLanguageStore = defineStore('language', () => {
  const currentLanguage = ref('zh') // Default to Chinese
  
  const translations = {
    zh: {
      // Header
      'app.title': 'CorePlay Agent',
      'nav.dashboard': '仪表板',
      'nav.agent_tester': '代理测试器',
      'nav.prompt_editor': '提示编辑器',
      'nav.llm_config': 'LLM配置',
      'header.check_connection': '检查连接',
      'header.user.admin': '管理员',
      'header.user.change_password': '修改密码',
      'header.user.logout': '退出登录',
      
      // Login
      'login.title': 'CorePlay Agent',
      'login.subtitle': '请登录以访问系统',
      'login.username': '用户名',
      'login.password': '密码',
      'login.login_button': '登录',
      'login.default_credentials': '默认凭据: admin / GOODluck!328',
      'login.system_info': '系统信息',
      'login.version': '版本',
      'login.environment': '环境',
      'login.backend': '后端',
      'login.connected': '已连接',
      'login.disconnected': '未连接',
      
      // Dashboard
      'dashboard.title': '仪表板',
      'dashboard.subtitle': 'CorePlay Agent 系统概览',
      'dashboard.connection_status': '连接状态',
      'dashboard.connected': '已连接',
      'dashboard.disconnected': '未连接',
      'dashboard.check_connection': '检查连接',
      'dashboard.system_info': '系统信息',
      'dashboard.agent_count': '代理数量',
      'dashboard.llm_provider': 'LLM提供商',
      'dashboard.quick_actions': '快速操作',
      'dashboard.test_agents': '测试代理',
      'dashboard.configure_llm': '配置LLM',
      'dashboard.edit_prompts': '编辑提示',
      
      // Agent Tester
      'agent_tester.title': '代理测试器',
      'agent_tester.subtitle': '测试各个代理的功能',
      'agent_tester.select_agent': '选择代理类型',
      'agent_tester.input_data': '输入数据',
      'agent_tester.test_button': '测试',
      'agent_tester.result': '结果',
      'agent_tester.diary_agent': '日记代理',
      'agent_tester.sensor_agent': '传感器代理',
      'agent_tester.bazi_agent': '八字代理',
      'agent_tester.event_category': '事件类别',
      'agent_tester.event_name': '事件名称',
      'agent_tester.event_details': '事件详情',
      'agent_tester.birth_year': '出生年份',
      'agent_tester.birth_month': '出生月份',
      'agent_tester.birth_day': '出生日期',
      'agent_tester.birth_hour': '出生时辰',
      'agent_tester.birthplace': '出生地',
      'agent_tester.sensor_type': '传感器类型',
      'agent_tester.sensor_data': '传感器数据',
      'agent_tester.testing': '测试中...',
      'agent_tester.success': '测试成功',
      'agent_tester.error': '测试失败',
      
      // LLM Config
      'llm_config.title': 'LLM配置',
      'llm_config.subtitle': '管理LLM提供商及其设置',
      'llm_config.available_providers': '可用提供商',
      'llm_config.add_provider': '添加提供商',
      'llm_config.provider_config': '提供商配置',
      'llm_config.test_connection': '测试连接',
      'llm_config.save_changes': '保存更改',
      'llm_config.basic_settings': '基本设置',
      'llm_config.provider_name': '提供商名称',
      'llm_config.provider_type': '提供商类型',
      'llm_config.api_endpoint': 'API端点',
      'llm_config.api_key': 'API密钥',
      'llm_config.model_name': '模型名称',
      'llm_config.performance_settings': '性能设置',
      'llm_config.max_tokens': '最大令牌数',
      'llm_config.temperature': '温度',
      'llm_config.timeout': '超时时间（秒）',
      'llm_config.retry_attempts': '重试次数',
      'llm_config.priority_status': '优先级和状态',
      'llm_config.priority': '优先级',
      'llm_config.enabled': '启用',
      'llm_config.capabilities': '功能',
      'llm_config.global_settings': '全局设置',
      'llm_config.default_provider': '默认提供商',
      'llm_config.enable_auto_switch': '启用自动切换',
      'llm_config.switch_on_failure': '失败时切换',
      'llm_config.switch_on_timeout': '超时时切换',
      'llm_config.max_switches': '每次请求最大切换次数',
      'llm_config.timeout_threshold': '超时阈值',
      'llm_config.save_global': '保存全局设置',
      'llm_config.reset_default': '重置为默认',
      'llm_config.cloud': '云端',
      'llm_config.local': '本地',
      'llm_config.ollama': 'Ollama',
      'llm_config.api_key_required': '需要API密钥',
      'llm_config.model_name_required': '需要模型名称',
      'llm_config.test_successful': '提供商测试成功',
      'llm_config.test_failed': '提供商测试失败',
      'llm_config.config_saved': 'LLM配置保存成功',
      'llm_config.config_failed': '配置保存失败',
      
      // Prompt Editor
      'prompt_editor.title': '提示编辑器',
      'prompt_editor.subtitle': '编辑和测试代理提示',
      'prompt_editor.select_agent': '选择代理',
      'prompt_editor.system_prompt': '系统提示',
      'prompt_editor.user_prompt': '用户提示模板',
      'prompt_editor.output_format': '输出格式',
      'prompt_editor.validation_rules': '验证规则',
      'prompt_editor.test_prompt': '测试提示',
      'prompt_editor.save_prompt': '保存提示',
      'prompt_editor.load_template': '加载模板',
      'prompt_editor.diary_agent': '日记代理',
      'prompt_editor.sensor_agent': '传感器代理',
      'prompt_editor.bazi_agent': '八字代理',
      'prompt_editor.testing': '测试中...',
      'prompt_editor.test_result': '测试结果',
      'prompt_editor.prompt_saved': '提示保存成功',
      'prompt_editor.prompt_failed': '提示保存失败',
      
      // Common
      'common.loading': '加载中...',
      'common.error': '错误',
      'common.success': '成功',
      'common.cancel': '取消',
      'common.confirm': '确认',
      'common.save': '保存',
      'common.test': '测试',
      'common.reset': '重置',
      'common.close': '关闭',
      'common.yes': '是',
      'common.no': '否',
      'common.enabled': '已启用',
      'common.disabled': '已禁用',
      'common.connected': '已连接',
      'common.disconnected': '未连接',
      'common.required': '必填',
      'common.optional': '可选',
      'common.general': '通用',
      'common.creative': '创意',
      'common.analytical': '分析',
      'common.coding': '编程',
      'common.chinese': '中文',
      'common.fast': '快速',
      'common.local': '本地'
    },
    en: {
      // Header
      'app.title': 'CorePlay Agent',
      'nav.dashboard': 'Dashboard',
      'nav.agent_tester': 'Agent Tester',
      'nav.prompt_editor': 'Prompt Editor',
      'nav.llm_config': 'LLM Config',
      'header.check_connection': 'Check Connection',
      'header.user.admin': 'Admin',
      'header.user.change_password': 'Change Password',
      'header.user.logout': 'Logout',
      
      // Login
      'login.title': 'CorePlay Agent',
      'login.subtitle': 'Please login to access the system',
      'login.username': 'Username',
      'login.password': 'Password',
      'login.login_button': 'Login',
      'login.default_credentials': 'Default credentials: admin / GOODluck!328',
      'login.system_info': 'System Information',
      'login.version': 'Version',
      'login.environment': 'Environment',
      'login.backend': 'Backend',
      'login.connected': 'Connected',
      'login.disconnected': 'Disconnected',
      
      // Dashboard
      'dashboard.title': 'Dashboard',
      'dashboard.subtitle': 'CorePlay Agent System Overview',
      'dashboard.connection_status': 'Connection Status',
      'dashboard.connected': 'Connected',
      'dashboard.disconnected': 'Disconnected',
      'dashboard.check_connection': 'Check Connection',
      'dashboard.system_info': 'System Information',
      'dashboard.agent_count': 'Agent Count',
      'dashboard.llm_provider': 'LLM Provider',
      'dashboard.quick_actions': 'Quick Actions',
      'dashboard.test_agents': 'Test Agents',
      'dashboard.configure_llm': 'Configure LLM',
      'dashboard.edit_prompts': 'Edit Prompts',
      
      // Agent Tester
      'agent_tester.title': 'Agent Tester',
      'agent_tester.subtitle': 'Test individual agent functionality',
      'agent_tester.select_agent': 'Select Agent Type',
      'agent_tester.input_data': 'Input Data',
      'agent_tester.test_button': 'Test',
      'agent_tester.result': 'Result',
      'agent_tester.diary_agent': 'Diary Agent',
      'agent_tester.sensor_agent': 'Sensor Agent',
      'agent_tester.bazi_agent': 'BaZi Agent',
      'agent_tester.event_category': 'Event Category',
      'agent_tester.event_name': 'Event Name',
      'agent_tester.event_details': 'Event Details',
      'agent_tester.birth_year': 'Birth Year',
      'agent_tester.birth_month': 'Birth Month',
      'agent_tester.birth_day': 'Birth Day',
      'agent_tester.birth_hour': 'Birth Hour',
      'agent_tester.birthplace': 'Birthplace',
      'agent_tester.sensor_type': 'Sensor Type',
      'agent_tester.sensor_data': 'Sensor Data',
      'agent_tester.testing': 'Testing...',
      'agent_tester.success': 'Test Successful',
      'agent_tester.error': 'Test Failed',
      
      // LLM Config
      'llm_config.title': 'LLM Configuration',
      'llm_config.subtitle': 'Manage LLM providers and their settings',
      'llm_config.available_providers': 'Available Providers',
      'llm_config.add_provider': 'Add Provider',
      'llm_config.provider_config': 'Provider Configuration',
      'llm_config.test_connection': 'Test Connection',
      'llm_config.save_changes': 'Save Changes',
      'llm_config.basic_settings': 'Basic Settings',
      'llm_config.provider_name': 'Provider Name',
      'llm_config.provider_type': 'Provider Type',
      'llm_config.api_endpoint': 'API Endpoint',
      'llm_config.api_key': 'API Key',
      'llm_config.model_name': 'Model Name',
      'llm_config.performance_settings': 'Performance Settings',
      'llm_config.max_tokens': 'Max Tokens',
      'llm_config.temperature': 'Temperature',
      'llm_config.timeout': 'Timeout (seconds)',
      'llm_config.retry_attempts': 'Retry Attempts',
      'llm_config.priority_status': 'Priority & Status',
      'llm_config.priority': 'Priority',
      'llm_config.enabled': 'Enabled',
      'llm_config.capabilities': 'Capabilities',
      'llm_config.global_settings': 'Global Settings',
      'llm_config.default_provider': 'Default Provider',
      'llm_config.enable_auto_switch': 'Enable Auto Switch',
      'llm_config.switch_on_failure': 'Switch on Failure',
      'llm_config.switch_on_timeout': 'Switch on Timeout',
      'llm_config.max_switches': 'Max Switches per Request',
      'llm_config.timeout_threshold': 'Timeout Threshold',
      'llm_config.save_global': 'Save Global Settings',
      'llm_config.reset_default': 'Reset to Default',
      'llm_config.cloud': 'Cloud',
      'llm_config.local': 'Local',
      'llm_config.ollama': 'Ollama',
      'llm_config.api_key_required': 'API Key required',
      'llm_config.model_name_required': 'Model name required',
      'llm_config.test_successful': 'Provider test successful',
      'llm_config.test_failed': 'Provider test failed',
      'llm_config.config_saved': 'LLM configuration saved successfully',
      'llm_config.config_failed': 'Configuration save failed',
      
      // Prompt Editor
      'prompt_editor.title': 'Prompt Editor',
      'prompt_editor.subtitle': 'Edit and test agent prompts',
      'prompt_editor.select_agent': 'Select Agent',
      'prompt_editor.system_prompt': 'System Prompt',
      'prompt_editor.user_prompt': 'User Prompt Template',
      'prompt_editor.output_format': 'Output Format',
      'prompt_editor.validation_rules': 'Validation Rules',
      'prompt_editor.test_prompt': 'Test Prompt',
      'prompt_editor.save_prompt': 'Save Prompt',
      'prompt_editor.load_template': 'Load Template',
      'prompt_editor.diary_agent': 'Diary Agent',
      'prompt_editor.sensor_agent': 'Sensor Agent',
      'prompt_editor.bazi_agent': 'BaZi Agent',
      'prompt_editor.testing': 'Testing...',
      'prompt_editor.test_result': 'Test Result',
      'prompt_editor.test_info': 'After editing prompts, test them in the Agent Tester',
      'prompt_editor.prompt_saved': 'Prompt saved successfully',
      'prompt_editor.prompt_failed': 'Prompt save failed',
      
      // Common
      'common.loading': 'Loading...',
      'common.error': 'Error',
      'common.success': 'Success',
      'common.cancel': 'Cancel',
      'common.confirm': 'Confirm',
      'common.save': 'Save',
      'common.test': 'Test',
      'common.reset': 'Reset',
      'common.close': 'Close',
      'common.yes': 'Yes',
      'common.no': 'No',
      'common.enabled': 'Enabled',
      'common.disabled': 'Disabled',
      'common.connected': 'Connected',
      'common.disconnected': 'Disconnected',
      'common.required': 'Required',
      'common.optional': 'Optional',
      'common.general': 'General',
      'common.creative': 'Creative',
      'common.analytical': 'Analytical',
      'common.coding': 'Coding',
      'common.chinese': 'Chinese',
      'common.fast': 'Fast',
      'common.local': 'Local'
    }
  }
  
  const isChinese = computed(() => currentLanguage.value === 'zh')
  const isEnglish = computed(() => currentLanguage.value === 'en')
  
  const t = (key) => {
    return translations[currentLanguage.value]?.[key] || key
  }
  
  const setLanguage = (lang) => {
    if (translations[lang]) {
      currentLanguage.value = lang
      localStorage.setItem('language', lang)
    }
  }
  
  const initLanguage = () => {
    const savedLang = localStorage.getItem('language')
    if (savedLang && translations[savedLang]) {
      currentLanguage.value = savedLang
    }
  }
  
  return {
    currentLanguage,
    isChinese,
    isEnglish,
    t,
    setLanguage,
    initLanguage
  }
})
